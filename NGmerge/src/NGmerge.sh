#!/bin/bash
# NGmerge 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of fwd_reads: '$fwd_reads'"
    echo "Value of rev_reads: '$rev_reads'"
    echo "Value of min_overlap: '$min_overlap'"
    echo "Value of mismatch_allowed: '$mismatch_allowed'"
    echo "Value of gzip_outputs: '$gzip_outputs'"
    echo "Value of maximum quality score: '$max_score'"

    dx download "$fwd_reads"
    dx download "$rev_reads"
#    dx-download-all-inputs

    sudo chmod 777 /NGmerge/NGmerge

    name=`echo $fwd_reads_name | awk -F "." '{print $1}'`
    echo $name

    if $gzip_outputs; then
	/NGmerge/NGmerge -1 "$fwd_reads_name" -2 "$rev_reads_name" -o "$name".merged.fastq -m "$min_overlap" -p "$mismatch_allowed" -f "$name".failed -z -v -n 4 -u $max_score
    else
	/NGmerge/NGmerge -1 "$fwd_reads_name" -2 "$rev_reads_name" -o "$name".merged.fastq -m "$min_overlap" -p "$mismatch_allowed" -f "$name".failed -y -v -n 4 -u $max_score
    fi

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    if $gzip_outputs; then
	output_file=$(dx upload "$name".merged.fastq.gz --brief)
    else
        output_file=$(dx upload "$name".merged.fastq --brief)
    fi

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output output_file "$output_file" --class=file
    for i in "$name".failed*; do
	echo "uploading as failed file '$i'"
	failed_file=$(dx upload "$i" --brief)
        dx-jobutil-add-output failed_reads "$failed_file" --class=array:file
    done
}
